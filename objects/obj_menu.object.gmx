<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Default menu position
menu_position = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Moving and selecting with the cursor

// Defining controls
menu_move = 0;
menu_move -= max(keyboard_check_pressed(vk_up), keyboard_check_pressed(ord("W")), (gamepad_button_check_pressed(0,gp_padu)));
menu_move += max(keyboard_check_pressed(vk_down), keyboard_check_pressed(ord("S")), (gamepad_button_check_pressed(0,gp_padd)));


// Moving the cursor along the menu, looping around if trying to move past the top or bottom
// Only moves if the array contains more than one item
if(array_length_1d(menu) &gt; 1)
{
    if (menu_move != 0)
    {
        menu_position += menu_move;
        if (menu_position &lt; 0) menu_position = array_length_1d(menu) - 1;
        if (menu_position &gt; array_length_1d(menu) - 1) menu_position = 0;
        
        audio_play_sound(snd_menu_move,0,0)
    }
}


// Selecting the current option, or go back to the previous menu
// Make sure the user isn't trying to go back to the previous menu
if(global.draw_title_screen == false) &amp;&amp; keyboard_check_pressed(ord("X"))
{
    room_goto(rm_menu);
    audio_play_sound(snd_menu_select,0,0);
}

// Get user input
push = max(keyboard_check_released(vk_enter),keyboard_check_released(ord("Z")),gamepad_button_check_pressed(0,gp_face1),gamepad_button_check_pressed(0,gp_start),0);

scr_volume_control();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Drawing the menu

// menu_to_use is defined by the children
if(push == 1)
{
    scr_menu(menu_to_use);
}

// Setting up the font
draw_set_halign(fa_right);
draw_set_valign(fa_middle);
draw_set_color(c_white);

// Draw title screen sprite (but not in cases such as the options menu)
if(global.draw_title_screen == true)
{
    // Logo
    draw_sprite(spr_title_screen, 0, room_width / 2, (room_height / 2) - 40);
    
    // Version number in the bottom right corner
    draw_text(room_width - 2, room_height - 10, VERSION_NUMBER);
}

// Reset halign back to left for the rest of the text
draw_set_halign(fa_left);

// Loop through menu array, drawing every option, taking the MENU_TEXT_GUTTER space into consideration
// Note that the starting position depends on where the object is placed in the room
for (var i = 0; i &lt; array_length_1d(menu); i += 1)
{
    draw_text(x + MENU_TEXT_GUTTER, y + (i * MENU_TEXT_GUTTER), string (menu[i]));
}

// Draw the cursor sprite at the correct position
// Only draws the sprite if the menu contains more than one item
if(array_length_1d(menu) &gt; 1)
{
    draw_sprite(sprite_index, 0, x, y + menu_position * MENU_TEXT_GUTTER);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
